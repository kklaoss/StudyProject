#include <string>  // Подключение библиотеки для работы со строками
#include <iostream>  // Подключение библиотеки для ввода/вывода
class Worker  // Объявление класса Worker
{
public:  // Публичные члены класса (доступны извне)
	std::string second_name;  // Поле для хранения фамилии работника
	double salary;  // Поле для хранения оклада работника
	int year_on_birth;  // Поле для хранения года рождения работника
	Worker()  // Конструктор по умолчанию (без параметров)
	{
		second_name = "";  // Инициализация фамилии пустой строкой
		salary = 0.0;  // Инициализация оклада нулевым значением
		year_on_birth = 2000;  // Инициализация года рождения значением 2000
	}
	Worker(std::string worker_name, double worker_salary, int worker_year_on_birth)  // Конструктор с параметрами
	{
		second_name = worker_name;  // Инициализация фамилии переданным значением
		salary = worker_salary;  // Инициализация оклада переданным значением
		year_on_birth = worker_year_on_birth;  // Инициализация года рождения переданным значением
	}
	~Worker()  // Деструктор (вызывается при уничтожении объекта)
	{
		std::cout << "\n\nОбъект " << second_name << " уничтожен." << std::endl;  // Вывод сообщения об уничтожении объекта
	}
	void age() const  // Метод для вычисления и вывода возраста работника
	{
		std::cout << "\nВозраст работника: " << 2025 - year_on_birth << " лет";  // Вычисление и вывод возраста
	}
	void days_until_50() const  // Метод для вычисления и вывода количества дней до 50 лет
	{
		int age = 2025 - year_on_birth;  // Вычисление текущего возраста
		if (age >= 50)  // Проверка, если возраст уже 50 или больше
		{
			std::cout << "\nУже 50 или более лет.";  // Вывод сообщения
		}
		else
		{
			std::cout << "\nДней до 50 лет: " << (50 - age) * 365;  // Вычисление и вывод количества дней до 50 лет
		}
	}
	void print() const  // Метод для вывода информации о работнике
	{
		std::cout << "Фамилия: " << second_name << "\nОклад: " << salary << " $" << "\nГод рождения: " << year_on_birth;  // Вывод информации
	}
};