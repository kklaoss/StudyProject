// Подключение заголовочного файла с объявлением класса Worker
#include "task_2.h"
// Подключение стандартной библиотеки ввода/вывода
#include <iostream>
// Реализация конструктора по умолчанию
Worker::Worker()
{
	// Инициализация фамилии пустой строкой
	last_name = "";
	// Инициализация зарплаты нулём
	salary = 0.0;
	// Инициализация года рождения 2000-м годом
	year_on_birth = 2000;
}
// Реализация конструктора с параметрами
Worker::Worker(std::string worker_name, double worker_salary, int worker_year_on_birth)
{
	// Установка фамилии из параметра
	last_name = worker_name;
	// Установка зарплаты из параметра
	salary = worker_salary;
	// Установка года рождения из параметра
	year_on_birth = worker_year_on_birth;
}
// Реализация деструктора
Worker::~Worker()
{
	// Вывод сообщения об уничтожении объекта с указанием фамилии
	std::cout << "\n\nОбъект " << last_name << " уничтожен." << std::endl;
}
// Реализация метода age()
void Worker::age() const
{
	// Вычисление и вывод возраста (2025 - год рождения)
	std::cout << "\nВозраст работника: " << 2025 - year_on_birth << " лет";
}
// Реализация метода days_until_50()
void Worker::days_until_50() const
{
	// Вычисление текущего возраста
	int age = 2025 - year_on_birth;
	// Проверка, если возраст уже 50 или больше
	if (age >= 50)
	{
		// Вывод сообщения, что работнику уже 50 или больше
		std::cout << "\nУже 50 или более лет.";
	}
	else
	{
		// Вычисление и вывод количества дней до 50-летия
		std::cout << "\nДней до 50 лет: " << (50 - age) * 365;
	}
}
// Реализация метода print()
void Worker::print() const
{
	// Вывод фамилии работника
	std::cout << "Фамилия: " << last_name
		// Вывод зарплаты работника
		<< "\nОклад: " << salary << " $"
		// Вывод года рождения работника
		<< "\nГод рождения: " << year_on_birth;
}