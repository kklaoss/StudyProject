#include <iostream> // Подключаем библиотеку для ввода-вывода
#include <forward_list> // Подключаем библиотеку для использования односвязного списка
#include <string> // Подключаем библиотеку для работы со строками
using namespace std; // Используем стандартное пространство имен для упрощения кода
// Определяем структуру Stack, которая содержит односвязный список строк
struct Stack
{
	forward_list<string> list; // Объявляем список строк внутри структуры
};
void push(Stack& stack, const string& value) // Функция для добавления элемента в стек
{
	stack.list.push_front(value); // Добавляем элемент в начало списка
}
void pop(Stack& stack) // Функция для удаления элемента из стека
{
	if (!stack.list.empty()) // Проверяем, не пуст ли стек
	{
		stack.list.pop_front(); // Удаляем элемент из начала списка
	}
	else
	{
		cout << "Стек пуст, удаление невозможно!" << endl; // Выводим сообщение, если стек пуст
	}
}
void print(const Stack& stack) // Функция для вывода содержимого стека 
{
	for (const auto& item : stack.list) // Проходим по всем элементам списка
	{
		cout << item << " "; // Выводим каждый элемент
	}
	cout << endl; // Переход на новую строку после вывода всех элементов
}
void print_two_char_strings(const Stack& stack) // Функция для вывода строк длиной 2 символа из стека
{
	for (const auto& item : stack.list) // Проходим по всем элементам списка
	{
		if (item.length() == 2) // Проверяем, равна ли длина строки 2
		{
			cout << item << " "; // Выводим строку, если ее длина 2
		}
	}
	cout << endl; // Переход на новую строку после вывода всех строк длиной 2
}
int main() // Главная функция программы
{
	setlocale(LC_ALL, "RU"); // Устанавливаем локаль для корректного отображения русских символов
	Stack stack; // Создаем экземпляр стека
	// Добавляем элементы в стек
	push(stack, "Students");
	push(stack, "of");
	push(stack, "the");
	push(stack, "group");
	push(stack, "TE");
	push(stack, "3");
	cout << "Содержимое стека после добавления элементов:" << endl; // Сообщение о содержимом стека
	print(stack); // Выводим содержимое стека
	pop(stack); // Удаляем верхний элемент стека
	cout << "Содержимое стека после удаления одного элемента:" << endl; // Сообщение о содержимом стека после удаления
	print(stack); // Выводим содержимое стека после удаления
	cout << "Строки длиной 2 символа в стеке:" << endl; // Сообщение о строках длиной 2 символа
	print_two_char_strings(stack); // Выводим строки длиной 2 символа из стека
}