#include <iostream> // Подключение библиотеки для ввода-вывода
using namespace std; // Использование пространства имен std
void sort_arrays(int* arr, int size) // Функция для сортировки массива
{
	for (int i = 0; i < size - 1; ++i) // Внешний цикл для прохода по всем элементам массива
	{
		for (int j = 0; j < size - i - 1; ++j) // Внутренний цикл для сравнения элементов и их перестановки
		{
			if (arr[j] > arr[j + 1]) // Если текущий элемент больше следующего, меняем их местами
			{
				int temp = arr[j]; // Временная переменная для хранения текущего элемента
				arr[j] = arr[j + 1]; // Меняем текущий элемент на следующий
				arr[j + 1] = temp; // Меняем следующий элемент на временный
			}
		}
	}
}
int main() // Определение функции №4
{
	setlocale(LC_ALL, "rus"); // Установка локали для корректного отображения русского языка
	int n; // Переменная для хранения размера массива
	cout << "Введите размер массива a: "; // Вывод сообщения для ввода размера массива
	cin >> n; // Ввод размера массива
	int* a = new int[n]; // Создание динамического массива a размером n
	cout << "\nВведите " << n << " элементов массива:\n"; // Вывод сообщения для ввода элементов массива
	for (int i = 0; i < n; ++i)
	{
		cin >> a[i]; // Ввод элементов массива a
	}
	int* b = new int[n]; // Создание динамического массива b размером n
	int b_size = 0; // Переменная для хранения текущего размера массива b
	for (int i = 0; i < n; ++i)
	{
		if (a[i] > 0) // Если элемент массива a положительный
		{
			b[b_size++] = a[i] / 3; // Добавление элемента, деленного на 3, в массив b
		}
	}
	sort_arrays(b, b_size); // Сортировка массива b
	cout << "\nМассив a: "; // Вывод сообщения для отображения массива a
	for (int i = 0; i < n; ++i)
	{
		cout << a[i] << " "; // Вывод элементов массива a
	}
	cout << endl; // Переход на новую строку
	cout << "\nМассив b (положительные элементы a, деленные на 3, отсортированные): "; // Вывод сообщения для отображения массива b
	for (int i = 0; i < b_size; ++i)
	{
		cout << b[i] << " "; // Вывод элементов массива b
	}
	cout << endl; // Переход на новую строку
	delete[] a; // Освобождение памяти, выделенной под массив a
	delete[] b; // Освобождение памяти, выделенной под массив b
	return 0; // Возврат 0, указывающий на успешное завершение программы
}