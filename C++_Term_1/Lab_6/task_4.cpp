#include <iostream> // Подключение библиотеки для ввода-вывода
using namespace std; // Использование пространства имен std
struct Book // Определение структуры Book
{
	char Author[100]; // Автор книги
	char Title[100];  // Название книги
	char Publisher[100]; // Издательство
	int Year; // Год издания
	double Price; // Цена книги
};
bool check_k(const char Publisher[100]) // Функция для проверки наличия буквы 'к' в названии издательства
{
	for (int i = 0; Publisher[i] != '\0'; ++i) // Перебор всех символов в строке Publisher
	{
		if (Publisher[i] == 'к')
		{
			return true; // Если найдена буква 'к', возвращаем true
		}
	}
	return false; // Если буква 'к' не найдена, возвращаем false
}
int сomparison_strings(const char str1[100], const char str2[100]) // Функция для сравнения двух строк
{
	int i = 0; // Индекс для перебора символов
	while (str1[i] != '\0' && str2[i] != '\0') // Перебор символов до конца одной из строк
	{
		if (str1[i] != str2[i])
		{
			return str1[i] - str2[i]; // Если символы не равны, возвращаем разницу
		}
		i++; // Переход к следующему символу
	}
	return str1[i] - str2[i]; // Возвращаем разницу последних символов
}
bool сomparison_title(Book a, Book b) // Функция для сравнения названий книг
{
	return сomparison_strings(a.Title, b.Title) < 0; // Возвращаем результат сравнения названий книг
}
void sort_books(Book books[10], int count) // Функция для сортировки массива книг по названию
{
	for (int i = 0; i < count - 1; ++i) // Внешний цикл для перебора всех книг
	{
		for (int j = 0; j < count - i - 1; ++j) // Внутренний цикл для сравнения и обмена книг
		{
			if (сomparison_title(books[j + 1], books[j])) // Если текущая книга должна быть после следующей, меняем их местами
			{
				Book temp = books[j]; // Временная переменная для хранения текущего элемента
				books[j] = books[j + 1]; // Меняем текущий элемент на следующий
				books[j + 1] = temp; // Меняем следующий элемент на временный
			}
		}
	}
}
int main() // Функция для выполнения задачи №4
{
	setlocale(LC_ALL, "RUS"); // Установка локали для корректного отображения русских символов
	Book books[10] = // Инициализация массива книг
	{
		{"Джоан Роулинг", "Гарри Поттер и философский камень", "Росмэн", 2002, 50},
		{"Лев Толстой", "Война и мир", "АСТ", 1867, 70},
		{"Джордж Оруэлл", "1984", "Эксмо", 2018, 45},
		{"Фёдор Достоевский", "Преступление и наказание", "Азбука", 1866, 60},
		{"Харпер Ли", "Убить пересмешника", "АСТ", 2017, 35},
		{"Эрнест Хемингуэй", "Старик и море", "Эксмо", 2016, 30},
		{"Маргарет Митчелл", "Унесённые ветром", "Азбука", 2012, 80},
		{"Джон Рональд Руэл Толкин", "Властелин колец", "АСТ", 2014, 120},
		{"Антуан де Сент-Экзюпери", "Маленький принц", "Росмэн", 2013, 25},
		{"Агата Кристи", "Убийство в Восточном экспрессе", "Эксмо", 2019, 40}
	};
	Book filtered_books[10]; // Массив для хранения отфильтрованных книг
	int count = 0; // Счетчик отфильтрованных книг
	for (int i = 0; i < 10; ++i) // Перебор всех книг для фильтрации
	{
		if (check_k(books[i].Publisher))
		{
			filtered_books[count++] = books[i]; // Если в названии издательства есть буква 'к', добавляем книгу в отфильтрованный массив
		}
	}
	sort_books(filtered_books, count); // Сортировка отфильтрованных книг по названию
	cout << "Отсортированный массив книг с буквой 'к' в названии издательства:\n\n"; // Вывод заголовка для отфильтрованных книг
	for (int i = 0; i < count; ++i) { // Цикл для вывода информации об отфильтрованных книгах
		cout << "Книга " << i + 1 << ": "; // Вывод номера книги
		cout << "Автор: " << filtered_books[i].Author << ", Название: " << filtered_books[i].Title; // Вывод автора и названия текущей книги
		cout << ", Издательство: " << filtered_books[i].Publisher << ", Год: " << filtered_books[i].Year; // Вывод издательства и года издания текущей книги
		cout << ", Стоимость: " << filtered_books[i].Price << "$\n"; // Вывод стоимости текущей книги
	}
	return 0; // Возврат 0, указывающий на успешное завершение программы
}