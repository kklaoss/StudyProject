#include <iostream> // Подключение библиотеки для ввода-вывода
using namespace std; // Использование пространства имен std
struct Coordinates // Определение структуры Coordinates
{
	double x; // Координата X
	double y; // Координата Y
};
struct Circle // Определение структуры Circle
{
	double radius; // Радиус окружности
	Coordinates center; // Центр окружности (координаты X и Y)
};
void sort_circles(Circle circles[], int size) // Функция для сортировки массива окружностей по возрастанию радиуса
{
	for (int i = 0; i < size - 1; ++i) // Внешний цикл для прохода по всем элементам массива
	{
		for (int j = 0; j < size - i - 1; ++j) // Внутренний цикл для сравнения элементов и их сортировки
		{
			if (circles[j].radius > circles[j + 1].radius) // Если текущий радиус больше следующего, меняем их местами
			{
				Circle temp = circles[j]; // Временная переменная для хранения текущего элемента
				circles[j] = circles[j + 1]; // Меняем текущий элемент на следующий
				circles[j + 1] = temp; // Меняем следующий элемент на временный
			}
		}
	}
}
int main() // Функция для выполнения задачи №5
{
	setlocale(LC_ALL, "RUS"); // Установка локали для корректного отображения русских символов
	setlocale(LC_ALL, "RUS");
	Circle circles[10]; // Массив для хранения 10 окружностей
	for (int i = 0; i < 10; ++i) // Цикл для ввода данных о каждой окружности
	{
		cout << "Введите информацию об окружности " << i + 1 << ":\n"; // Вывод номера текущей окружности
		cout << "Введите радиус окружности: "; // Запрос на ввод радиуса
		cin >> circles[i].radius; // Ввод радиуса
		cout << "Введите координату X центра окружности: "; // Запрос на ввод координаты X центра
		cin >> circles[i].center.x; // Ввод координаты X центра
		cout << "Введите координату Y центра окружности: "; // Запрос на ввод координаты Y центра
		cin >> circles[i].center.y; // Ввод координаты Y центра
		cout << endl; // Переход на новую строку
	}
	double sumRadius = 0.0; // Переменная для хранения суммы радиусов
	for (int i = 0; i < 10; ++i) // Цикл для вычисления суммы радиусов всех окружностей
	{
		sumRadius += circles[i].radius; // Добавление радиуса текущей окружности к сумме
	}
	cout << "Сумма радиусов всех окружностей: " << sumRadius << "\n"; // Вывод суммы радиусов
	sort_circles(circles, 10); // Сортировка окружностей по возрастанию радиуса
	cout << "\nОтсортированные окружности по возрастанию радиуса:\n\n"; // Вывод заголовка для отсортированных окружностей
	for (int i = 0; i < 10; ++i) // Цикл для вывода информации об отсортированных окружностях
	{
		cout << "Окружность " << i + 1 << ": "; // Вывод номера окружности
		cout << "Радиус: " << circles[i].radius; // Вывод радиуса текущей окружности
		cout << ", Центр (X: " << circles[i].center.x << ", Y: " << circles[i].center.y << ")\n"; // Вывод координат центра текущей окружности
	}
	return 0; // Возврат 0, указывающий на успешное завершение программы
}