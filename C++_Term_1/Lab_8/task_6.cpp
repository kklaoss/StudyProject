#include <iostream> // Подключаем библиотеку для ввода-вывода
using namespace std; // Используем стандартное пространство имен
struct PNode // Определяем структуру для узла списка
{
	int data; // Данные, хранящиеся в узле
	PNode* prev; // Указатель на предыдущий узел
	PNode* next; // Указатель на следующий узел
};
struct TList // Определяем структуру для двусвязного списка
{
	PNode* First; // Указатель на первый узел списка
	PNode* Last; // Указатель на последний узел списка
	PNode* Current; // Указатель на текущий узел списка
};
void InsertLast(TList& L, int D) // Функция для вставки нового узла в конец списка
{
	PNode* newNode = new PNode; // Создаем новый узел
	(*newNode).data = D; // Записываем данные в новый узел
	(*newNode).prev = nullptr; // Устанавливаем указатель на предыдущий узел в nullptr
	(*newNode).next = nullptr; // Устанавливаем указатель на следующий узел в nullptr
	// Если список пустой, новый узел становится первым и последним
	if (L.First == nullptr)
	{
		L.First = newNode; // Устанавливаем указатель на первый узел
		L.Last = newNode; // Устанавливаем указатель на последний узел
		L.Current = newNode; // Устанавливаем указатель на текущий узел
	}
	else // Если список не пустой
	{
		(*newNode).prev = L.Last; // Устанавливаем указатель на предыдущий узел
		(*L.Last).next = newNode; // Устанавливаем указатель на новый узел в последнем узле
		L.Last = newNode; // Обновляем указатель на последний узел
		L.Current = newNode; // Устанавливаем указатель на текущий узел
	}
}
int main() // Главная функция программы
{
	setlocale(LC_ALL, "RU"); // Устанавливаем локализацию для вывода на русском
	TList myList = { nullptr, nullptr, nullptr }; // Инициализируем список с пустыми указателями
	int N; // Переменная для хранения количества чисел
	cout << "Введите количество чисел (N > 0): "; // Запрашиваем у пользователя количество чисел
	cin >> N; // Считываем количество чисел
	// Проверяем, что количество чисел больше 0
	if (N <= 0)
	{
		cout << "N должно быть больше 0!" << endl; // Выводим сообщение об ошибке
		return 1; // Завершаем программу с кодом ошибки
	}
	cout << "Введите числа: "; // Запрашиваем у пользователя ввод чисел
	for (int i = 0; i < N; ++i) // Цикл для ввода N чисел
	{
		int num; // Переменная для хранения введенного числа
		cin >> num; // Считываем число
		InsertLast(myList, num); // Вставляем число в конец списка
	}
	// Выводим адреса первого, последнего и текущего узлов списка
	cout << "Адрес первого элемента: " << myList.First << endl;
	cout << "Адрес последнего элемента: " << myList.Last << endl;
	cout << "Адрес текущего элемента: " << myList.Current << endl;
	// Освобождаем память, удаляя все узлы списка
	PNode* current = myList.First; // Начинаем с первого узла
	while (current != nullptr) // Пока не достигнем конца списка
	{
		PNode* next = (*current).next; // Сохраняем указатель на следующий узел
		delete current; // Удаляем текущий узел
		current = next; // Переходим к следующему узлу
	}
}