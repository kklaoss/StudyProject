#include <iostream>  // Подключение библиотеки для работы с вводом и выводом
#include <fstream>   // Подключение библиотеки для работы с файлами
#include <vector>    // Подключение библиотеки для работы с векторами
int main()
{
	setlocale(LC_ALL, "RU");  // Установка локали для поддержки кириллицы в консоли
	int m{ 2 }, n{ 2 };  // Инициализация переменных m и n
	std::ifstream in_file_1("file_7_1.txt");  // Открытие файла "file_7_1.txt" для чтения
	std::vector<std::vector<std::vector<int>>> matrix_1;  // Создание трехмерного вектора для хранения матриц
	std::vector<std::vector<int>> matrix(m, std::vector<int>(n));  // Создание двумерного вектора для временного хранения матрицы 2x2
	while (in_file_1)  // Чтение файла до конца
	{
		for (int i = 0; i < m; i++)  // Цикл по строкам матрицы
		{
			for (int j = 0; j < n; j++)  // Цикл по столбцам матрицы
			{
				in_file_1 >> matrix[i][j];  // Чтение элемента матрицы из файла
			}
		}
		if (in_file_1)  // Проверка, что чтение прошло успешно
		{
			matrix_1.push_back(matrix);  // Добавление матрицы в трехмерный вектор
		}
	}
	in_file_1.close();  // Закрытие файла после чтения
	std::ofstream out_file_2("file_7_2.txt", std::ios::app);  // Открытие файла "file_7_2.txt" для записи в режиме добавления
	for (const auto& mat : matrix_1)  // Цикл по всем матрицам в трехмерном векторе
	{
		int det = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];  // Вычисление определителя матрицы 2x2
		if (det == 5)  // Проверка, равен ли определитель 5
		{
			for (int i = 0; i < m; ++i)  // Цикл по строкам матрицы
			{
				for (int j = 0; j < n; ++j)  // Цикл по столбцам матрицы
				{
					out_file_2 << mat[i][j] << " ";  // Запись элемента матрицы в файл
				}
				out_file_2 << std::endl;  // Переход на новую строку после записи строки матрицы
			}
			out_file_2 << std::endl;  // Добавление пустой строки между матрицами
		}
	}
	out_file_2.close();  // Закрытие файла после записи
	std::ifstream in_file_2("file_7_2.txt");  // Открытие файла "file_7_2.txt" для чтения
	std::vector<std::vector<std::vector<int>>> matrix_2;  // Создание трехмерного вектора для хранения матриц из второго файла
	while (in_file_2)  // Чтение файла до конца
	{
		for (int i = 0; i < m; i++)  // Цикл по строкам матрицы
		{
			for (int j = 0; j < n; j++)  // Цикл по столбцам матрицы
			{
				in_file_2 >> matrix[i][j];  // Чтение элемента матрицы из файла
			}
		}
		if (in_file_2)  // Проверка, что чтение прошло успешно
		{
			matrix_2.push_back(matrix);  // Добавление матрицы в трехмерный вектор
		}
	}
	in_file_2.close();  // Закрытие файла после чтения
	std::cout << "Содержимое первого файла:" << std::endl;  // Вывод заголовка для содержимого первого файла
	for (const auto& mat : matrix_1)  // Цикл по всем матрицам из первого файла
	{
		for (int i = 0; i < m; ++i)  // Цикл по строкам матрицы
		{
			for (int j = 0; j < n; ++j)  // Цикл по столбцам матрицы
			{
				std::cout << mat[i][j] << " ";  // Вывод элемента матрицы в консоль
			}
			std::cout << std::endl;  // Переход на новую строку после вывода строки матрицы
		}
		std::cout << std::endl;  // Добавление пустой строки между матрицами
	}
	std::cout << "Содержимое второго файла:" << std::endl;  // Вывод заголовка для содержимого второго файла
	for (const auto& mat : matrix_2)  // Цикл по всем матрицам из второго файла
	{
		for (int i = 0; i < m; ++i)  // Цикл по строкам матрицы
		{
			for (int j = 0; j < n; ++j)  // Цикл по столбцам матрицы
			{
				std::cout << mat[i][j] << " ";  // Вывод элемента матрицы в консоль
			}
			std::cout << std::endl;  // Переход на новую строку после вывода строки матрицы
		}
		std::cout << std::endl;  // Добавление пустой строки между матрицами
	}
}